#spring.datasource.url=jdbc:mysql://localhost/Planit?useSSL=False
#spring.datasource.username= root
#spring.datasource.password= Shantanu
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.jpa.generate-ddl=true
#spring.servlet.multipart.max-file-size=2MB
#spring.servlet.multipart.max-request-size=2MB

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
#spring.datasource.url=jdbc:postgresql://ec2-54-225-68-133.compute-1.amazonaws.com:5432/d13s8bppsu9o9o
#spring.datasource.username= whltgfbgijgtbu
#spring.datasource.password= 7e7c6dc71d5c26a26e20401a70e8733131be797de8871dfebf78ec9b1251920c
#spring.datasource.url=jdbc:postgresql://localhost:5432/planit
#spring.datasource.username= postgres
#spring.datasource.password= root
#
##error-handling
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
#
## The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#
## Hibernate ddl auto (create, create-drop, validate, update)
#
#spring.jpa.hibernate.ddl-auto = create

spring:
    datasource:
        url: jdbc:postgresql://localhost:5432/planit
        username: postgres
        password: root

    jpa:
        show-sql: true
        database-platform: org.hibernate.dialect.PostgreSQL9Dialect
        hibernate:
            ddl-auto: update
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
                temp:
                    use_jdbc_metadata_defaults: false
    
    mail:
        host: smtp.gmail.com
        port: 587
        username: planit.p532@gmail.com
        password: Planyourevent@p532
        properties:
            mail:
               smtp:
                 auth: true
                 starttls:
                    enable: true
                    required: true
                 
    security:
      oauth2:
        client:
          registration:
            facebook:
              clientId: 352774405457700
              clientSecret: 4cdbb801adec5c5ff8f37c9a8764befa
              redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - public_profile
          provider:
            facebook:
              authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
              tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
              userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - https://planyourevent.herokuapp.com/oauth2/redirect